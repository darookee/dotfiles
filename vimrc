set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
"
" File handling
Bundle 'sjl/gundo.vim'

"Bundle 'mbbill/undotree'
" <c-u>
"
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
" <c-e>
"
Bundle 'editorconfig/editorconfig-vim'
"
" Autoinsert
Bundle 'scrooloose/nerdcommenter'
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-surround'
"Bundle 'tpope/vim-endwise'
Bundle 'EvanDotPro/php_getset.vim'
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "SirVer/ultisnips"
Bundle 'darookee/vim-snippets'
"
" Line handling
Bundle 'maxbrunsfeld/vim-yankstack'
" <c-m> <localleader><c-m>
"
" External Commands
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-eunuch'
Bundle 'kchmck/vim-coffee-script'
Bundle 'airblade/vim-gitgutter'
Bundle 'mrtazz/simplenote.vim'

" Motion and search
Bundle 'Lokaltog/vim-easymotion'
Bundle 'kana/vim-smartword'
Bundle 'IndexedSearch'
Bundle 'camelcasemotion'
Bundle 'LStinson/TagmaTasks'
Bundle 'AndrewRadev/splitjoin.vim'
" ,sj ,sk
"
Bundle 'jakobwesthoff/argumentrewrap'
" ,aw
"
" Syntax
Bundle 'scrooloose/syntastic'
"
" Visual
Bundle 'roman/golden-ratio'
Bundle 'vim-scripts/ZoomWin'
" <c-w>o
"Bundle 'troydm/easybuffer.vim'
" ,bb
"
Bundle 'chrisbra/NrrwRgn'
" :<range>NR[!]
"
Bundle 'gregsexton/MatchTag'

"set background=dark
colorscheme neon
" Source statusline vimrc {{{
let s:statusline = expand($HOME . '/.vim/statusline.vim')
if filereadable(s:statusline)
    exec ':so ' . s:statusline
endif
" }}}
"

set modelines=5
set nowritebackup
set nobackup
set noswapfile
set hidden

" Tabstops
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set smarttab

" filehandling
set encoding=utf-8
set scrolloff=3
"set autochdir
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set visualbell
set ttyfast
set ruler
set laststatus=2
set relativenumber
set pastetoggle=<F10>

if version >= 703
  set undodir=~/.vim/undodir
  set undofile
  set undoreload=10000
endif
set undolevels=1000

" commenting
set fo+=o " insert on o
set fo-=r " don't insert on enter
set fo-=t " don't autoreap
set wildmode=longest,list
set backspace=indent,eol,start " powerfull backspace

" wrapping
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

" indentation
set autoindent
set cindent
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case
set smartindent
set joinspaces

" setup yankstack
call yankstack#setup()

" searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" Syntax highlighting
syntax on
filetype plugin indent on

" Visual settings
set list
set listchars=tab:â–¸\ ,trail:â–¸,extends:>,precedes:<,eol:Â¬
set ruler
set showcmd
set shortmess=atI
set cursorline

" Remove menu bar
set guioptions-=m

" Remove toolbar
set guioptions-=T

" Filetypes
au BufRead,BufNewFile {*.md,*.mkd,*.markdown} set ft=markdown
au BufRead,BufNewFile {COMMIT_EDITMSG} set ft=gitcommit
au BufRead,BufNewFile *.json set ft=javascript " highlight json like javascript

au FileType mail setlocal fo+=aw
au FileType mail set spell spelllang=de_DE

" iptables commentstring for NERDCommenter
if getline(1) =~ "^# Generated by iptables-save" || getline(1) =~ "^# Firewall configuration written by"
    setfiletype iptables
    set commentstring=#%s
    finish
endif

" restore position on read
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | execute "normal g'\"" | endif

" save on focus lost
au FocusLost * :wa

" remap leader
let mapleader = ","
let maplocalleader = "-"

" disable keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" remap search to center on line
map N Nzz
map n nzz

" edit and reload .vimrc
nnoremap <silent> <Leader>vrc :tabnew<CR>:e ~/.vimrc<CR>
nnoremap <silent> <Leader>rld :so ~/.vimrc<CR>

" toggle folds with space
nnoremap <space> za

" fold HTML Tags
nnoremap <leader>ft Vatzf

" create blank newlines
nnoremap <silent> <Leader>o o<Esc>
nnoremap <silent> <Leader>O O<Esc>

" Split line (oposite of S-J)
nnoremap <silent> <leader>j gEa<CR><ESC>ew

" Press ,W to remove trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>:nohl<CR>

" ,V to highlight pasted text
nnoremap <leader>v V`]

" redirect last search matching lines to new buffer
nnoremap <silent> <localleader><c-f> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

" escape with jj
inoremap jj <ESC>

" insert new row (into brackets for example)
inoremap <leader>ll <CR><ESC>O

" split window settings
nnoremap <localleader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Argumentwrap
nnoremap <silent> <leader>aw :call argumentrewrap#RewrapArguments()<CR>

" syntactics
let g:syntastic_auto_loc_list = 1
let g:syntastic_auto_jump = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_javascript_checkers=['jslint']
let g:syntastic_php_checkers=['php']
let g:syntastic_mode_map = { 'mode': 'passive',
            \ 'active_filetypes': ['ruby', 'php', 'python'],
            \ 'passive_filetypes': [] }

map <leader>sc :SyntasticCheck<CR>

" Gundo
nnoremap <leader><C-u> :GundoToggle<CR>

" NERDTree
nnoremap <C-e> :NERDTreeToggle<CR>
nnoremap <localleader><C-e> :NERDTreeFind<CR>

" phpDoc
imap <C-o> :set paste<CR>:exe PhpDoc()<CR>:set nopaste<CR>i
let g:pdv_cfg_Author = "Nils Uliczka <nils.uliczka@darookee.net>"
let g:pdv_cfg_Copyright = "2012 Nils Uliczka"
let g:pdv_cfg_License = ""

" snipmate
let g:snips_author = "Nils Uliczka"

" Gist
let g:gist_detect_filetype = 1

" YankStack
nmap <C-M> <Plug>yankstack_substitute_older_paste
nmap <localleader><C-M> <Plug>yankstack_substitute_newer_paste
nnoremap <leader>p p`[v`]=

" easybuffer
"map <leader>bb :EasyBuffer<CR>

" CtrlP
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_extensions = ['line']
let g:ctrlp_root_markers = ['templates/','engine/']
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 20
let g:ctrlp_switch_buffer = 'EtVH'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard | grep -v -P "\.jpg$|\.png$|\.gif$"', 'find %s -type f| grep -v -P "\.jpg$|\.png$|\.gif$"']
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_mruf_relative = 1
map <leader><C-p> :CtrlPBuffer<CR>

" smartword
map ww  <Plug>(smartword-w)
map bb  <Plug>(smartword-b)
map ee  <Plug>(smartword-e)
map gge  <Plug>(smartword-ge)
" use camelcase default keys

" splitjoin
nmap <Leader>sj :SplitjoinSplit<cr>
nmap <Leader>sk :SplitjoinJoin<cr>

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<s-q>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" PHP Specific bindings
" create getter and setter of protected var

" php_getset
" using php_getset (-p, -s, -g, -b)
" convert array to object
nnoremap <localLeader>n :s/\['\(.\{-}\)'\]/->\1/gc<CR>
" convert snake_case to camelCase
nnoremap <localLeader>cc :s#_\(\l\)#\u\1#g<CR>

let b:phpgetset_getterTemplate = 
          \ "\n" .
          \ "/**\n" .
          \ " * Get %varname%.\n" .
          \ "\n" .
          \ " * @return %varname%\n" .
          \ " */\n" .
          \ "function %funcname%() {\n" .
          \ "   return $this->%varname%;\n" .
          \ "}"

let b:phpgetset_setterTemplate = 
          \ "\n" .
          \ "/**\n" .
          \ " * Set %varname%.\n" .
          \ "\n" .
          \ " * @return %varname%\n" .
          \ " */\n" .
          \ "function %funcname%($%varname%) {\n" .
          \ "   $this->%varname% = $%varname%;\n" .
          \ "}"

" misc filehandling stuff
au FileType smarty call RagtagInit()
au FileType smarty runtime! ftplugin/html.vim
au FileType smarty set fileencoding=latin1

" Source simplenote vimrc {{{
let s:simplenoterc = expand($HOME . '/.simplenoterc')
if filereadable(s:simplenoterc)
    exec ':so ' . s:simplenoterc
endif
" }}}
