#!/bin/bash

set -e

config_file=$(realpath ~/.vault_managed_config)

if [ -f "${config_file}" ]; then
    . ${config_file}
fi

host="${1}"

if [ -z "${VAULT_ADDR}" ]; then
    echo "No \$VAULT_ADDR set, using default."
fi

if [ -z "${VAULT_ROLE}" ]; then
    echo "No \$VAULT_ROLE set. Exiting."
    exit 1
fi

if [ -z "${VAULT_PRINCIPAL}" ]; then
    echo "No \$VAULT_PRINCIPAL set. Exiting."
    exit 1
fi

certdir=$(realpath ~/.ssh/vault_certs/)
cachefile="${certdir}/.vault_cache"
idfile="${certdir}/${host}"
certfile="${idfile}-cert.pub"

# set defaults if not set in config
auth_method=${VAULT_AUTH_METHOD:-oidc}
ssh_sign_path=${VAULT_SSH_SIGN_PATH:-ssh-client-signer/sign/}
key_algo=${SSH_KEY_ALGO:-ed25519}
managed_hosts_path=${VAULT_SSH_MANAGED_HOST_PATH:-ssh-values/managed_hosts}
manages_hosts_key=${VAULT_SSH_MANAGED_HOSTS_KEY:-hosts}
cache_lifetime=${VAULT_SSH_HOSTS_CACHE_TIME:-3600}

login_if_not() {
    vault token lookup 2>&1 > /dev/null || login_status=$?

    # 2 == not logged in
    if [ "${login_status}" == 2 ]; then
        vault login -method=${auth_method} -no-print role="${VAULT_ROLE}"
    fi
}

get_managed_hosts() {
    curtime=$(date +%s)

    cachefilemtime=0
    if [ -f "${cachefile}" ]; then
        cachefilemtime=$(stat -c %Y "${cachefile}")
    fi

    if [ ${curtime} -ge $(( ${cachefilemtime} + ${cache_lifetime} )) ]; then
        login_if_not

        vault kv get -format=json ${managed_hosts_path} | jq -r ".data.data.${manages_hosts_key} | .[]" > "${cachefile}"
    fi

    grep "${host}" "${cachefile}" > /dev/null || is_managed=$?

    return $is_managed
}

is_managed=$(get_managed_hosts)

# grep exits with '1' if the string is not found
if [ "${is_managed}" == "1" ]; then
    exit ${is_managed}
fi

# if there is no keyfile, create one
if [ ! -f "${idfile}" ]; then
    ssh-keygen -t ${key_algo} -f "${idfile}" -C "vault@${host}" -N ""
fi

need_renew=0
if [ -f "${certfile}" ]; then
    certfile_size=$(stat --format=%s ${certfile})
    # if something went wrong earlier this file may be empty, if it is - remove it
    if [ "${certfile_size}" == 0 ]; then
        rm ${certfile}
    fi
fi

if [ -f "${certfile}" ]; then
    curdate=$(date +%s)
    certdate=$(date -d $(ssh-keygen -L -f "${certfile}"|grep Valid:|awk '{print $5}') +%s)
    if [ ${curdate} -ge ${certdate} ]; then
        # the certificate has expired, we need to renew
        need_renew=1
    fi
else
    # there is no certificate, we need to create one
    need_renew=1
fi

if [ "${need_renew}" == 1 ]; then
    login_if_not

    vault write -field=signed_key ${ssh_sign_path}${VAULT_ROLE_PATH} public_key=@${idfile}.pub valid_principals=${VAULT_PRINCIPAL} > ${certfile}
fi
