priority -50

global !p
import vim

# Set g:ultisnips_php_scalar_types to 1 if you'd like to enable PHP 7's scalar types for return values
def isPHPScalarTypesEnabled():
	return 1
endglobal

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet pub "Public function" b
/**
 * $1
 *
 * @return ${4:void}
 */
public function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
/**
 * $1
 *
 * @return ${4:void}
 */
protected function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pri "Private function" b
/**
 * $1
 *
 * @return ${4:void}
 */
private function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
/**
 * $1
 *
 * @return ${4:void}
 */
public static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pros "Protected static function" b
/**
 * $1
 *
 * @return ${4:void}
 */
protected static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pris "Private static function" b
/**
 * $1
 *
 * @return ${4:void}
 */
private static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet new "New class instance" b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet var "add variable declaration" b
/*
 * @var ${3:string}
 */
${1:protected} $${2:var};$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet class "Class declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 */
class $1
{
}
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Interface ${1:`!p snip.rv=snip.basename`}
 */
interface $1
{
	public function ${3:someFunction}();$4
}
endsnippet

snippet trait "Trait declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Trait ${1:`!p snip.rv=snip.basename`}
 */
trait $1
{
}
endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

# PHPUnit snippets
snippet testcase "class XYZTest extends \PHPUnit_Framework_TestCase { ... }"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

/**
 */
class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` extends \PHPUnit_Framework_TestCase
{
	public function test$1()
	{
		${0:${VISUAL}}
	}
}
endsnippet

snippet ent "Symfony2 doctrine entity" b
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity()
 * @ORM\Table(name="`!p
tmp = re.match(r'.*(?=\.)', fn).group()
tmp = re.sub(r'\B([A-Z])', r'_\1', tmp)
snip.rv = tmp.lower()
`")
 */
`!p
m = re.search(r'Abstract', path)
if m:
	snip.rv = 'abstract '
`class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
`
{
	/**
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue
	 * @ORM\Id
	 */
	private $id;
}
endsnippet

snippet subs "Symfony2 subscriber" b
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

/**
 */
class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` implements EventSubscriberInterface
{
	public function __construct()
	{
	}

	/**
	 * {@inheritDoc}
	 */
	public static function getSubscribedEvents()
	{
		return [];
	}
}
endsnippet

snippet ac "Symfony2 action and template" b
/**
 * $1Action
 * @param $3mixed ${2/, /\n     * \@param mixed /g}
 */
public function ${1:index}Action($2)
{
	$0
	return [];
}`!p
relpath = os.path.relpath(path)`
endsnippet

snippet dd "Doctrine dump" b
\Doctrine\Common\Util\Debug::dump(${1});
endsnippet

snippet vd "var_dump" b
var_dump(${1});
endsnippet

snippet ddd "Doctrine dump and die" b
\Doctrine\Common\Util\Debug::dump(${1});
die();
endsnippet

snippet vdd "var_dump and die" b
var_dump(${1});
die();
endsnippet

# :vim:ft=snippets:
